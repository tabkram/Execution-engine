name: Unpublish NPM Canary Versions

description: Unpublish NPM Canary versions with a specific prefix

inputs:
  canary_prefix:
    description: "Prefix for the Canary version to unpublish"
    required: true
  npm_token:
    description: "NPM token for authentication"
    required: true

outputs:
  result:
    description: "Result of the unpublish operation"
    value: ${{ steps.unpublish_step.outputs.result }}

runs:
  using: composite
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        registry-url: "https://registry.npmjs.org/"

    - name: Validate canary_prefix input
      id: validate_prefix
      shell: bash
      run: |
        if [[ -z "${{ inputs.canary_prefix }}" ]]; then
          echo "Error: canary_prefix is required but empty."
          exit 1
        fi

        if [[ ! "${{ inputs.canary_prefix }}" == *"-canary"* ]]; then
          echo "⛔️Error: version prefix ${{ inputs.canary_prefix }} must contain '-canary'."
          exit 1
        fi
        echo "version prefix is valid: ${{ inputs.canary_prefix }}"

    - name: Remove old Canary versions
      id: unpublish_step
      shell: bash
      run: |
        echo "⏳ Checking versions with prefix: ${{ inputs.canary_prefix }} ..."
        VERSIONS=$(npm dist-tag ls execution-engine | grep "${{ inputs.canary_prefix }}" | awk '{print $2}' || true)
        
        # Check if VERSIONS is empty
        if [ -z "$VERSIONS" ]; then
          echo "✅ No versions found for prefix ${{ inputs.canary_prefix }}. Nothing to unpublish."
        else
          RESULT=()  # Initialize an empty array
          for v in $VERSIONS; do
            echo "⏳ Unpublishing version: $v"
            if npm unpublish execution-engine@$v; then
              echo "✅ Unpublished version: $v"
              RESULT+=("$v")  # Append each unpublished version to the array
            else
              echo "🚫 Failed to unpublish version: $v. Skipping."
            fi
          done
        
          # Convert array to a comma-separated string
          RESULT_STRING=$(IFS=,; echo "${RESULT[*]}")
        
          # Set outputs
          echo "result=$RESULT_STRING" >> $GITHUB_ENV
          echo "result=$RESULT_STRING" >> $GITHUB_OUTPUT
        fi
      env:
        NODE_AUTH_TOKEN: ${{ inputs.npm_token }}
